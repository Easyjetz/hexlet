const users = [
    { name: 'Igor', age: 19 },
    { name: 'Danil', age: 1 },
    { name: 'Vovan', age: 4 },
    { name: 'Matvey', age: 16 },
];
  
const result = [];
for (const { age } of users) {
    result.push(age);
}
  
console.log(result); // => [19, 1, 4, 16]

const names = users.map((user) => user.name);
// вариант с дестракчерингом параметра:
const names2 = users.map(({name}) => name);
console.log(names); // => ['Igor', 'Danil', 'Vovan', 'Matvey']

/*Метод map принимает первым параметром callback-функцию. Дальше внутри себя map 
перебирает элементы переданной коллекции и для каждого элемента вызывает callback-функцию.
На вход этой функции передаётся элемент исходного массива, а её результат записывается 
в новый массив, который и возвращается наружу. */

// Некоторые замечания относительно метода map (они относятся в принципе к операции отображения):

/*1) Возвращаемый массив всегда такого же размера, как и исходный. map "отображает" каждый элемент 
исходного массива в элемент возвращаемого. 
2) Внутри анонимной функции можно выполнять любые вычисления, а не только возвращать часть 
исходного элемента.
3) map полностью скрывает от нас перебор (обход) исходного массива и процесс сборки нового массива.*/

const numbers = [5, 2, 3];

const newNumbers = numbers.map((number) => number ** 2);

console.log(newNumbers); // => [25, 4, 9]