// Специализированные поисковые методы

// DOM предлагает сразу несколько способов решения этой задачи. Самый простой вариант поиска — 
// это поиск по идентификатору:

<p id="content">Это параграф</p>
const el = document.getElementById('content');

/*
Так как id в соответствии со спецификацией обязан быть уникальным на странице, то и метод getElementById 
всегда возвращает один элемент. С другой стороны, по случайности, в html может оказаться несколько тегов с 
одним id. В такой ситуации браузер может вернуть всё, что угодно.
*/


// Если нужна обработка сразу нескольких элементов, то тут лучше подойдёт поиск по классу:

// Будет возвращена коллекция!
const collection = document.getElementsByClassName('row');

// поиск среди потомков el
el.getElementsByClassName('row');

// Как видите, этот метод позволяет искать не только в целом документе, но и среди потомков любого элемента.

// При необходимости можно искать по тегу:

document.getElementsByTagName('span');

// поиск всех элементов
document.getElementsByTagName('*');

// поиск среди потомков el
el.getElementsByTagName('span');

// Поиск по селектору

// Наиболее универсальным способом поиска является поиск по селектору. Напомню, что селектор — 
// это правило, позволяющее описать набор элементов в DOM Tree.

<ul id="menu">
  <li class="odd"><span>Первый</span> пункт</li>
  <li>Второй</li>
  <li class="odd"><span>Третий</span> пункт</li>
</ul>

// Возвращает первый элемент
const ul = document.querySelector('#menu');

const spans = ul.querySelectorAll('.odd > span');

/*
Оба метода querySelector и querySelectorAll могут применяться как ко всему документу, так и к конкретному 
элементу. Поиск, как обычно, будет вестись среди всех потомков.
*/

// Полезные методы

// matches
// Предикат el.matches(css) проверяет, удовлетворяет ли el селектору css.

// closest

// Метод el.closest(css) ищет ближайший элемент выше по иерархии, удовлетворяющий селектору. 
// Сам элемент тоже анализируется. Если такой элемент найден, то он возвращается.

