import reverse from '../src'; // есть папка с тестами hexlet-jest

test('reverse', () => {
  const str = 'hello';
  expect(reverse(str)).toEqual('olleh');
  expect(reverse('')).toEqual('');
})

/*Для тестов Jest предоставляет две глобальные функции: test и expect. 
Они доступны без какого-либо импорта, так как Jest делает их глобальными функциями. */

/*Функция test нужна для описания конкретного теста и его проверок. Самих тестовых функций может 
быть любое количество. Первым параметром эта функция принимает произвольную строчку, которая должна 
описывать сам тест. Эта строчка потом отображается на экране во время запуска тестов для упрощения отладки.
 */

 /* 
 Второй параметр — функция, внутри которой описан проверочный код. Обратите внимание на то, что этот код 
 не выполняется сразу. Функция test добавляет его внутри Jest, который уже решает как и когда запускать 
 тесты. Это позволяет проводить различные оптимизации например, выполнять тесты параллельно.

 Самое необычное в этом коде — проверки. Jest использует "матчеры" (matchers). Это утверждения, 
 имеющие особую структуру, напоминающую обращение к объекту. Общий принцип работы матчеров такой:
 Вызывается функция expect куда передаётся актуальное (фактическое) значение.
 На результате, возвращаемом функцией expect, вызывается подходящий матчер, например, toEqual.
 */

 // практика - так пишутся тесты.

test('without', () => {
  expect(without([], 3)).toEqual([]);
  expect(without([3, 8, 9, 8, 10], 8, 10)).toEqual([3, 9]);
});