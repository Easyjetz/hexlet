// Взаимное влияние тестов

/*
Одно из ключевых правил: тесты не должны влиять друг на друга. Это значит, что любой тест выполняется 
так, как будто других тестов не существует в природе.
 */

 /*
 Любое ветвление внутри тестов это фактически несколько тестов в рамках одного теста. 
 От этого надо избавляться и никогда так не писать 
 */


// Слишком сильная детализация
test('create user', () => {
    const user = new User();
    // Код, добавляющий пользователя в базу данных
    expect(user.age).toEqual(28);
});

test('create user 2', () => {
    const user = new User();
    // Код, добавляющий пользователя в базу данных
    expect(user.name).toEqual('Mark');
});

/*
Чаще всего, единственным результатом такого разделения будет большее количество кода и усложнение 
рефакторинга в будущем, когда кода станет по-настоящему много. 
*/

/*
Код с тестами писать дольше, чем код без тестов
Это очень интересный вопрос, по которому можно понять, насколько хорошо программист умеет писать тесты. 
Несмотря на то, что некоторые виды тестирования действительно сложны и требуют дополнительного времени, 
ежедневные тесты, которые пишутся вместе с кодом, должны приводить к ускорению разработки. И на это есть 
пять причин:

Тесты влияют на дизайн кода. Они помогают выявить неудачные решения намного раньше.

Подготовка входных данных может занимать значительное время. С тестами это нужно сделать один раз.

Проверка результата работы кода может быть сложной и разнообразной. Тесты позволяют об этом не думать, 
они сами проверяют, что всё хорошо, включая пограничные случаи.

Если в проекте тесты пишутся регулярно, то проще и быстрее делать рефакторинг, так как не придётся 
проверять вручную другие части кода.

Тесты снижают уровень стресса. 
*/

// ВАЖНО ВАЖНО ВАЖНО ВАЖНО

// важно понимать, что необязательно тестировать функции(если их суть объединена в 1, интерфейс например)
// по отдельности, мы можем проверить правильную работу программы, понимая её принципы.
// за хорошим примером идти в практику этой темы на hexlet.
// суть в том, что там просили тестировать функции интерфейса(добавление товаров и прочее).
// и я протестил основные(получение стоимости и кол-ва товара), но не стал проверять правильное 
// название товара, например - это была довольно глупая проверка.
